@model FoxNetSoft.Plugin.Misc.Articles.Models.ArticleGroupDetailsModel
@inject IWorkContext workContext
@inject SeoSettings seoSettings
@using Nop.Web.Framework.UI
@using Nop.Core
@using Nop.Core.Domain.Seo
@using Nop.Web.Extensions
@using Microsoft.AspNetCore.Mvc.Rendering
@using FoxNetSoft.Plugin.Misc.Articles.Helpers
@{
    Layout = "_ColumnsTwo";

    Html.AddCssFileParts(ResolveViewPathHelper.GetThemesCSSPath("styles.css"));
    var supportRtl = workContext.WorkingLanguage.Rtl;
    if (supportRtl)
    {
        Html.AddCssFileParts(ResolveViewPathHelper.GetThemesCSSPath("styles.rtl.css"));
    }
    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : T("FoxNetSoft.Plugin.Misc.Articles.PageTitle.Article").Text);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var articleGroupUrl = Url.RouteUrl("ArticleGroupPost", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(articleGroupUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }
}
@section left {
    @await Component.InvokeAsync("ArticleNavigation", new { currentGroupId = Model.Id, currentArticleId = 0 })
    @await Component.InvokeAsync("ArticleTags")
}
@*breadcrumb*@
@if (Model.DisplayBreadcrumb)
{
    @await Html.PartialAsync(ResolveViewPathHelper.GetThemesPath("Article/_ArticleBreadcrumb.cshtml"), Model.Breadcrumb)
}
<div class="page article-page">
    <div class="page-title">
        <h1>
            @if (!String.IsNullOrEmpty(Model.Name))
            {
                @Model.Name
            }
            else
            {
                @T("FoxNetSoft.Plugin.Misc.Articles.PageTitle.Article")
            }
        </h1>
    </div>
    <div class="page-body">
        @*description*@
        @if (!String.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="articlegroup-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @if (Model.Id==0)
        {
            <div class="articlegroup-description">
                @await Component.InvokeAsync("TopicBlock", new { systemName = "ArticleHomePage" })
            </div>
        }
        <div class="article-selectors">        
            @*sorting*@
            @if (Model.PagingFilteringContext.AllowArticleSorting && Model.Articles.Any())
            {
                <div class="article-sorting">
                    <span>@T("FoxNetSoft.Plugin.Misc.Articles.ArticleRead.OrderBy")</span>
                    @Html.DropDownList("articles-orderby", Model.PagingFilteringContext.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
                </div>
            }
        </div>
        @await Html.PartialAsync(ResolveViewPathHelper.GetThemesPath("Article/_ArticlesBlock.cshtml"), Model.Articles)
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
            {
            <div class="pager">
                @pager
            </div>
        }
    </div>
</div>
