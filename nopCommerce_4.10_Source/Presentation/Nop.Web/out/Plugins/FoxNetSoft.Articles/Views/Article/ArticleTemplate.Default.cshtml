@model FoxNetSoft.Plugin.Misc.Articles.Models.ArticleDetailsModel
@inject IWorkContext workContext
@inject SeoSettings seoSettings
@using Nop.Web.Framework.UI
@using Nop.Core
@using Nop.Core.Domain.Seo
@using Nop.Web.Framework.Security.Captcha
@using FoxNetSoft.Plugin.Misc.Articles.Helpers
@{
    Layout = "_ColumnsTwo";

    Html.AddCssFileParts(ResolveViewPathHelper.GetThemesCSSPath("styles.css"));
    var supportRtl = workContext.WorkingLanguage.Rtl;
    if (supportRtl)
    {
        Html.AddCssFileParts(ResolveViewPathHelper.GetThemesCSSPath("styles.rtl.css"));
    }
    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var pageUrl = $"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}";

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var articleUrl = Url.RouteUrl("ArticlePost", new { SeName = Model.SeName }, Context.Request.Scheme);
        Html.AddCanonicalUrlParts(articleUrl);
    }

    //open graph META tags
    if (Model.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"article\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.PictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + pageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.StoreName) + "\" />");

        if (!String.IsNullOrWhiteSpace(Model.OpenGraphMetaTags_Facebook_appId))
        {
            Html.AddHeadCustomParts("<meta property=\"fb:app_id\" content=\"" + Html.Encode(Model.OpenGraphMetaTags_Facebook_appId) + "\" />");
        }
        if (!String.IsNullOrWhiteSpace(Model.OpenGraphMetaTags_Facebook_admins))
        {
            Html.AddHeadCustomParts("<meta property=\"fb:admins\" content=\"" + Html.Encode(Model.OpenGraphMetaTags_Facebook_admins) + "\" />");
        }
        if (!String.IsNullOrWhiteSpace(Model.OpenGraphMetaTags_Vk_appId))
        {
            Html.AddHeadCustomParts("<meta property=\"vk:app_id\" content=\"" + Html.Encode(Model.OpenGraphMetaTags_Vk_appId) + "\" />");
        }
    }

    //Twitter META tags
    if (Model.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.StoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.PictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + pageUrl + "\" />");
    }
}
@section left {
    @await Component.InvokeAsync("ArticleNavigation", new { currentGroupId = 0, currentArticleId = Model.Id })
}
<!--article breadcrumb-->
@await Html.PartialAsync(ResolveViewPathHelper.GetThemesPath("Article/_ArticleBreadcrumb.cshtml"), Model.Breadcrumb)
@await Component.InvokeAsync("Widget", new { widgetZone = "articledetails_after_breadcrumb", additionalData = Model.Id })
<div class="page articlepost-page">
    @await Component.InvokeAsync("Widget", new { widgetZone = "article_top", additionalData = Model.Id })
       @*
    <div class="article-print-button">
       <a class="article-print-button" href="@Url.RouteUrl("ArticlePost", new { SeName = Model.SeName,printerview="print" })">Printer Friendly Version</a>
    </div>
        *@ 
    <div class="page-title">
        <h1>@Model.Title</h1>
        <span class="article-date">-@Model.DateUserTimeZone.ToString("dddd, dd MMMM yyyy")</span>
    </div>
    <div class="page-body">
        <div class="post-body">
            @Html.Raw(Model.Body)
        </div>
        @if (Model.Tags.Count > 0)
        {
            <div class="tags">
                <label>@T("FoxNetSoft.Plugin.Misc.Articles.Tags"):</label>
                <ul>
                    @for (int i = 0; i < Model.Tags.Count; i++)
                    {
                        var tag = Model.Tags[i];
                        <li><a href="@Url.RouteUrl("ArticleByTag", new {tag = tag})">@tag</a></li>
                        if (i != Model.Tags.Count - 1)
                        {
                            <li class="separator">,</li>
                        }
                    }
                </ul>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = "article_page_before_comments", additionalData = Model.Id })
        @if (Model.AllowComments)
        {
            <div class="fieldset new-comment" id="comments">
                <div class="title">
                    <strong>@T("FoxNetSoft.Plugin.Misc.Articles.Comments.LeaveYourComment")</strong>
                </div>
                @{
                    var validationSummary = Html.ValidationSummary(true);
                }
                <div class="notifications">
                        <div asp-validation-summary="ModelOnly" class="message-error"></div>
                        @{
                            var result = TempData["foxnetsoft.article.addcomment.result"] as string;
                        }
                        @if (!string.IsNullOrEmpty(result))
                        {
                            <div class="result">@result</div>
                        }
                </div>
                <form asp-route="ArticlePost" asp-route-sename="@Model.SeName" method="post">
                    <div class="form-fields">
                        <div class="inputs">
                            <label asp-for="AddNewComment.CommentText" asp-postfix=":"></label>
                            <textarea asp-for="AddNewComment.CommentText" class="enter-comment-text"></textarea>
                            <span asp-validation-for="AddNewComment.CommentText"></span>
                        </div>
                        @if (Model.AddNewComment.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                <nop-captcha />
                            </div>
                        }
                    </div>
                    <div class="buttons">
                        <input type="submit" name="add-comment" class="button-1 blog-post-add-comment-button" value="@T("Blog.Comments.SubmitButton")" />
                    </div>
                </form>

            </div>
                if (Model.Comments.Any())
                {
                    <div class="comment-list">
                        <div class="title">
                            <strong>@T("FoxNetSoft.Plugin.Misc.Articles.Comments")</strong>
                        </div>
                        <div class="comments">
                            @foreach (var comment in Model.Comments)
                            {
                                <div class="comment blog-comment">
                                    <div class="comment-info">
                                        <div class="user-info">
                                            @if (comment.AllowViewingProfiles)
                                            {
                                                <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})" class="username">@(comment.CustomerName)</a>
                                            }
                                            else
                                            {
                                                <span class="username">@(comment.CustomerName)</span>
                                            }

                                            @if (!String.IsNullOrEmpty(comment.CustomerAvatarUrl))
                                            {
                                                <div class="avatar">
                                                    @if (comment.AllowViewingProfiles)
                                                    {
                                                        <a href="@Url.RouteUrl("CustomerProfile", new {id = comment.CustomerId})" class="avatar-img-link">
                                                            <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <img src="@(comment.CustomerAvatarUrl)" class="avatar-img" alt="avatar" />
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="comment-content">
                                        <div class="comment-time">
                                            <label>@T("FoxNetSoft.Plugin.Misc.Articles.Comments.CreatedOn"):</label>
                                            <span class="stat-value">@comment.CreatedOn.ToString("g")</span>
                                        </div>
                                        <div class="comment-body">
                                            @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))
                                        </div>
                                    </div>
                                    @await Component.InvokeAsync("Widget", new { widgetZone = "article_page_inside_comment", additionalData = comment.Id })
                                </div>
                            }
                        </div>
                    </div>
                    }
                }
        @await Component.InvokeAsync("Widget", new { widgetZone = "article_page_after_comments", additionalData = Model.Id })
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = "article_bottom", additionalData = Model.Id })
    @await Component.InvokeAsync("ArticleRelatedProducts", new { articleId = Model.Id })
</div>
